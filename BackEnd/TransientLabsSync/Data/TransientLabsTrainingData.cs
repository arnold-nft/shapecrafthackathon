using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShapeCraft.TransientLabsSync.Data
{

    // DISCLAIMER: This implementation is kept simple for the scope of the hackathon.
    // More complex data sources can be integrated, such as:
    // - Training the AI model with word data from Transient Labs Docs or their GitHub repository.
    // - Scraping and processing Solidity files to understand contract logic and interactions.
    // While these enhancements would provide much more value, they are out of scope for this hackathon.

    public static class TransientLabsTrainingData
    {
        public static List<string> SmallContentChunks = new()
        {
            "Transient Labs provides smart contracts and tools for minting NFTs and creating custom token contracts on Ethereum.",
            "To mint NFTs, creators interact with the Transient Labs smart contract through a simple function call.",
            "The smart contracts support minting, transferring, and managing NFTs directly on the blockchain.",
            
            "How can I mint an NFT using Transient Labs?",
            "What are the required parameters for minting an NFT?",
            "How do I check my NFT balance in Transient Labs?",
            "What contract address do I use for interacting with Transient Labs NFTs?",
            "How can I get started with creating an NFT collection using Transient Labs?",
            "How does Transient Labs handle on-chain metadata?",
            
            "The mint function requires the recipient's address and token ID as inputs.",
            "The 'balanceOf' function returns the number of NFTs owned by a given address.",
            "The smart contract ABI provides the interface for interacting with the contract via Web3 or other blockchain libraries.",
            
            "Ensure you are connected to the correct Ethereum network (Mainnet, Rinkeby, etc.) before minting.",
            "If you're unable to mint, check if your wallet is connected and has sufficient gas to complete the transaction.",
            "The mint function requires the sender to be an authorized wallet for minting new NFTs.",
            "If you're getting an error when querying balances, verify the contract address and owner address are correct.",
            
            "You can integrate Transient Labs' smart contracts into a web app to allow users to mint and manage their own NFTs.",
            "By using the Transient Labs API, developers can create fully decentralized, on-chain NFT experiences."
        };


        public static List<string> BigContentChunks = new()
        {
            "---\r\ndescription: >-\r\n  TL Creator Contracts offer unmatched innovation and gas efficiency while\r\n  adhering to NFT standards.\r\n---\r\n\r\n# Creator Contracts Overview\r\n\r\n## General Contract Details\r\n\r\n### Creator Sovereignty\r\n\r\nAll Creator Contracts are owned by the creator. Full stop. There is no other option.\r\n\r\n### Proxy Pattern\r\n\r\nTL Creator Contracts are [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167) immutable proxies in order to allow for cheap deployment costs, customization, and transparency. After deployment, the contract logic is not upgradeable and if any new implementation contracts are released, creators must deploy a new contract.&#x20;\r\n\r\nFor more background on proxy patterns in, checkout this [great article](https://blog.openzeppelin.com/proxy-patterns/) from OpenZeppelin.\r\n\r\nFor how to deploy our contracts, read more [here](../integrations/deploying-tl-contracts).\r\n\r\n### Security\r\n\r\nAll Transient Labs contracts inherit either from code we have written, or the battle-tested and audited [OpenZeppelin](https://openzeppelin.com/) contracts. We take security very seriously and utilize fuzz testing with a minimum of 10,000 runs prior to any release.\r\n\r\n## Source Code\r\n\r\nThe source code for the TL Creator Contracts can be found on our GitHub.&#x20;\r\n\r\n{% @github-files/github-code-block %}\r\n\r\n",
            "---\r\ndescription: The latest implementation addresses for our creator contracts.\r\n---\r\n\r\n# Implementation Contracts\r\n\r\nThe latest implementation addresses are listed here for each token type. Contracts are deployed with `CREATE2` opcodes and thus the implementation addresses are the same across [supported chains](../miscellaneous/supported-blockchains).\r\n\r\n<table><thead><tr><th width=\"157\">Type</th><th>Address</th></tr></thead><tbody><tr><td>ERC721TL</td><td>0x72be8d37610ee69c72a50fa9728cb4a795fbcf38</td></tr><tr><td>ERC1155TL</td><td>0xe99fe9606b76a42b7ed69e13c6abbadb462626b8</td></tr><tr><td>ERC7160TL</td><td>0x95c79af9e585751069fd710e05c78fbeb7679827</td></tr><tr><td>Doppelganger</td><td>0x053f8f66936e306cc8a5b24f2c111e90891f588e</td></tr><tr><td>Collector's Choice</td><td>0x96310a20ffb00e0d1d29fc44cabed721d0fa7ee1</td></tr><tr><td>Shatter</td><td>0xc41ea82091fe01dd3a853cad2e766e924e49f653</td></tr></tbody></table>\r\n",
            "---\r\ndescription: >-\r\n  ERC721TL is Transient Labs' Creator Contract compliant with the ERC-721\r\n  specification.\r\n---\r\n\r\n# ERC721TL\r\n\r\n## Airdrops\r\n\r\nERC721TL allows for single token and multi-token airdrops. Multi-token airdrops are more expensive than batch mints, however, still are market leading for code-less solutions.&#x20;\r\n\r\n| Number of Tokens | Market    | ERC721TL  |\r\n| ---------------- | --------- | --------- |\r\n| 5                | 450,000   | 420,000   |\r\n| 10               | 830,000   | 675,000   |\r\n| 100              | 6,200,000 | 5,500,000 |\r\n\r\n## Batch Minting\r\n\r\nERC721TL implements market leading batch mint operations, while adhering to the ERC-721 specification. This is achieved through the use of custom ownership logic.&#x20;\r\n\r\nThe table and chart below shows gas usage comparison to the current market for batch mints, in gas units.&#x20;\r\n\r\nWhen plotted out, you can see that the slope of Transient's batch mint is basically flat compared to that of other options on the market.\r\n\r\n<table><thead><tr><th width=\"123\">Tokens</th><th width=\"144\">Market</th><th width=\"220\">ERC721TL Batch Mint</th><th data-hidden>ERC721TL Batch Mint Ultra</th></tr></thead><tbody><tr><td>1</td><td>210,000</td><td>176,000</td><td>176,000</td></tr><tr><td>5</td><td>450,000</td><td>198,000</td><td>187,000</td></tr><tr><td>10</td><td>830,000</td><td>209,000</td><td>187,000</td></tr><tr><td>100</td><td>6,200,000</td><td>402,000</td><td>187,000</td></tr><tr><td>200</td><td>12,000,000</td><td>616,000</td><td>187,000</td></tr><tr><td>1,000</td><td>Not Possible</td><td>2,331,000</td><td>187,000</td></tr></tbody></table>\r\n\r\n## External Mint\r\n\r\nERC721TL has been outfitted with an external mint function that allows for approved mint contracts to mint tokens. This is extremely useful when it comes to minting for direct sales, edition sales, and more! For more on access control, see below.\r\n\r\n## Burn\r\n\r\nERC721TL allows for any collector to burn tokens. This is intended to be used by creators with burn and redeem contracts in the future, but nothing stops collectors from burning tokens as they wish.\r\n\r\nThe burn function allows for the owner of the token or an approved operator to burn. The operator approval is required for burn and redeem contracts. This allows burn and redeem contracts to be configurable and determined at a later time.\r\n\r\n### Access Control\r\n\r\nThere is a built in access control mechanism for admins & mint contracts. This can be used to generate systems for novel mint mechanics, updatable metadata based on offchain mechanisms, and much more.\r\n\r\n### Rendering Contract\r\n\r\nThere is the ability to use a separate rendering contract for token uri generation. This allows for mint & reveal schemes, fully onchain metadata, and more.\r\n\r\n## Source\r\n\r\n[https://github.com/Transient-Labs/tl-creator-contracts/blob/main/src/erc-721/ERC721TL.sol](https://github.com/Transient-Labs/tl-creator-contracts/blob/main/src/erc-721/ERC721TL.sol)\r\n",
            "---\r\ndescription: >-\r\n  Transient Labs ERC-1155 Creator Contract is packed with more innovation than\r\n  another other solution on the market.\r\n---\r\n\r\n# ERC1155TL\r\n\r\n## Overview\r\n\r\nERC721TL is Transient Labs' Creator Contract compliant with the [ERC-1155](https://eips.ethereum.org/EIPS/eip-1155) specification.&#x20;\r\n\r\n## Airdrops\r\n\r\nERC1155TL makes it extremely easy for creators to mint and distribute a token to many recipients in one single transaction.\r\n\r\n## Batch Token Creation\r\n\r\nWith our implementation of ERC-1155 tokens, creators must create a token. This allows for a unique token URI per token and for checking if a token exists in the contract. Minting a newly created token can happen in the same transaction, but what if a creator wants to create 10 tokens?\r\n\r\nWell they can do this and distribute the tokens in a single transaction!&#x20;\r\n\r\n## Batch Burn\r\n\r\nERC1155TL allows for ultra-efficient token burning. A single collector can burn a batch of tokens (different token ids and amounts) in a single transaction!&#x20;\r\n\r\nThe burn feature is open to the collector or any operators approved by the collector. This is useful for burn and redeem contracts. This allows burn and redeem contracts to be configurable and determined at a later time.\r\n\r\n## Updating Token Metadata\r\n\r\nSynergy is not possible with the ERC-1155 specification, since there are technically more than one owner of a token. We recognize that metadata updates may be needed so we have included a method to do this. But we encourage artists to avoid updating unless necessary and such caution artists about this in The Lab.\r\n\r\n## Source\r\n\r\n[https://github.com/Transient-Labs/tl-creator-contracts/blob/main/src/erc-1155/ERC1155TL.sol](https://github.com/Transient-Labs/tl-creator-contracts/blob/main/src/erc-1155/ERC1155TL.sol)\r\n",
            "---\r\ndescription: >-\r\n  Transient Labs' Shatter contract creates an interesting liquidity mechanism\r\n  that can only be triggered by a token owner.\r\n---\r\n\r\n# Shatter\r\n\r\n_Note: This contract is no longer being actively developed and is largely just maintained. It may be dropped in future versions._\r\n\r\n## Overview\r\n\r\nShatter is a unique take on the ERC-721 standard that let's collectors liquidate a 1/1 by burning it and minting more tokens on the contract.\r\n\r\nBy utilizing the Shatter smart contract, collectors are given the power of choice — to retain the artwork as a true 1/1 or to shatter it, transforming the original piece into editioned ERC-721 NFTs or a collection of unique 1/1s.\r\n\r\nThis feature creates an entirely new level of interaction and engagement between creators and collectors, enabling an evolving ownership experience.\r\n\r\n## Creator Selected Parameters\r\n\r\nUpon mint of the first token on the contract (the 1/1), the creator can set the following parameters\r\n\r\n* minimum number of shatters\r\n* maximum number of shatters\r\n* timestamp after which shattering is possible\r\n\r\nThe collector may not shatter below the minimum or above the maximum number of shatters. In addition, the collector may not shatter prior to the timestamp selected by the creator.\r\n\r\nThis creates numerous ways for creators to get creative.\r\n\r\n## Shatter\r\n\r\nThis can only be called by the owner of token 0, and shatters the 1/1 into the pre-determined NFTs. It acts as a liquidity mechanism. This can only ever be called one time on each contract.\r\n\r\n## Fuse\r\n\r\nThis can be called by the owner of all shattered NFTs and is used to fuse the shatters back into the 1/1. This can only ever be called one time on each contract. After it is called and successful, the 1/1 stays a 1/1 forever.\r\n\r\n## Synergy\r\n\r\nSynergy is a Transient Labs mechanism to ensure collectors are protected against metadata changes. It is evident that metadata updates are needed in certain cases, although not that often. When needed, the feature is very useful, but could be abused and typically deters traditional art collectors.\r\n\r\nTo combat this, we have come up with a propose-commit scheme. In the event an update is needed, the creator proposes a metadata update. The collector can then visualize the change and approve or reject. Once approved, the metadata is updated, but only then.\r\n\r\nThe flow below shows Synergy at play.\r\n\r\n<figure><img src=\"https://1627108174-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FSXqzr9DuzdAPvEAOtbFK%2Fuploads%2FhQLUzxUzX9qBsoevjdwX%2Fimage.png?alt=media&#x26;token=a4f20e6d-f1d7-4f6f-824e-88d206f3e27b\" alt=\"\"><figcaption></figcaption></figure>\r\n\r\n## Source\r\n\r\n[https://github.com/Transient-Labs/tl-creator-contracts/blob/main/src/erc-721/shatter/Shatter.sol](https://github.com/Transient-Labs/tl-creator-contracts/blob/main/src/erc-721/shatter/Shatter.sol)\r\n",
            "---\r\ndescription: >-\r\n  Transient Labs ERC-7160 Creator Contract is packed with more innovation than\r\n  another other solution on the market.\r\n---\r\n\r\n# ERC7160TL\r\n\r\n## Overview\r\n\r\nERC7160TL is Transient Labs' Creator Contract compliant with the [ERC-7160](https://eips.ethereum.org/EIPS/eip-7160) specification.&#x20;\r\n\r\n## Airdrops\r\n\r\nERC7160TL allows for single token and multi-token airdrops. Multi-token airdrops are more expensive than batch mints, however, still are market leading for code-less solutions.&#x20;\r\n\r\n| Number of Tokens | Market    | ERC721TL  |\r\n| ---------------- | --------- | --------- |\r\n| 5                | 450,000   | 420,000   |\r\n| 10               | 830,000   | 675,000   |\r\n| 100              | 6,200,000 | 5,500,000 |\r\n\r\n## Batch Minting\r\n\r\nERC7160TL implements market leading batch mint operations, while adhering to the ERC-721 specification. This is achieved through the use of custom ownership logic. The table and chart below shows gas usage comparison to the current market for batch mints, in gas units.\r\n\r\n<table><thead><tr><th width=\"123\">Tokens</th><th width=\"144\">Market</th><th width=\"220\">ERC721TL Batch Mint</th></tr></thead><tbody><tr><td>1</td><td>210,000</td><td>176,000</td></tr><tr><td>5</td><td>450,000</td><td>198,000</td></tr><tr><td>10</td><td>830,000</td><td>209,000</td></tr><tr><td>100</td><td>6,200,000</td><td>402,000</td></tr><tr><td>200</td><td>12,000,000</td><td>616,000</td></tr><tr><td>1,000</td><td>Not Possible</td><td>2,331,000</td></tr></tbody></table>\r\n\r\n<figure><img src=\"https://1627108174-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FSXqzr9DuzdAPvEAOtbFK%2Fuploads%2F9SC7qjRi5Sdj38e0Mxai%2FBatch%20Mint%20Cost%20Comparison%20(2).png?alt=media&#x26;token=bf77b6bc-c6e3-40b2-8b6a-4d161c358600\" alt=\"\"><figcaption></figcaption></figure>\r\n\r\n## External Mint\r\n\r\nERC721TL has been outfitted with an external mint function that allows for approved mint contracts to mint tokens. This is extremely useful when it comes to minting for direct sales, edition sales, and more! For more on access control, see below.\r\n\r\n## Multi-Metadata\r\n\r\nERC7160TL follows the ERC-7160 specification, allowing each token to have an array of metadata associated with it. This allows for extra functionality and design for creators & collectors.\r\n\r\nCollectors of the tokens on this contract can choose to change their token's metadata to any option in the array. This emits a `MetadataUpdate` event that let's marketplaces re-index the metadata and display it.&#x20;\r\n\r\n## Burn\r\n\r\nERC721TL allows for any collector to burn tokens. This is intended to be used by creators with burn and redeem contracts in the future, but nothing stops collectors from burning tokens as they wish.\r\n\r\nThe burn function allows for the owner of the token or an approved operator to burn. The operator approval is required for burn and redeem contracts. This allows burn and redeem contracts to be configurable and determined at a later time.\r\n\r\n## Source\r\n\r\n[https://github.com/Transient-Labs/tl-creator-contracts/blob/main/src/erc-721/multi-metadata/ERC7160TL.sol](https://github.com/Transient-Labs/tl-creator-contracts/blob/main/src/erc-721/multi-metadata/ERC7160TL.sol)\r\n",
            "---\r\ndescription: >-\r\n  Transient Labs' ERC7160TLEditions contract extends ownership by letting\r\n  collectors change their token to any option in a contract-wide array of\r\n  metadata.\r\n---\r\n\r\n# ERC7160 Editions\r\n\r\n## Overview\r\n\r\nERC7160TLEditions is a contract that builds off our [ERC7160TL](erc7160tl) contract to allow creators to add metadata to a contract-wide array. Collectors of tokens on this contract can then change their tokens to display any desired metadata option available in the array.&#x20;\r\n\r\n## Contract-Wide Metadata Array\r\n\r\nInstead of minting specific metadata for a specific token, creators simply add metadata to an array on the contract. This array is dynamic and can grow (almost) infinitely big. All tokens then have access to this array.\r\n\r\nCollectors of the tokens on this contract can choose to change their token's metadata to any option in the array. This emits a `MetadataUpdate` event that let's marketplaces re-index the metadata and display it.&#x20;\r\n\r\nAs every token has access to the array, this is a new take on an edition that can be used in numerous ways.\r\n\r\n## Source\r\n\r\n[https://github.com/Transient-Labs/tl-creator-contracts/blob/main/src/erc-721/multi-metadata/ERC7160TLEditions.sol](https://github.com/Transient-Labs/tl-creator-contracts/blob/main/src/erc-721/multi-metadata/ERC7160TLEditions.sol)\r\n",
            "---\r\ndescription: >-\r\n  Transient Labs' Collector's Choice contract extends the ERC7160TLEditions\r\n  contract by letting the creator freeze metadata after a certain period of\r\n  time.\r\n---\r\n\r\n# Collector's Choice\r\n\r\n## Overview\r\n\r\nCollector's Choice is a contract that builds off our [ERC7160TL](erc7160tl) contract to allow creators to add metadata to a contract-wide array. Collectors of tokens on this contract can then change their tokens to display any desired metadata option available in the array. The creator can set a cutoff time, after which, the metadata array is frozen and collector's cannot change their metadata. This leads to interesting gamification & designs.\r\n\r\n## Contract-Wide Metadata Array\r\n\r\nInstead of minting specific metadata for a specific token, creators simply add metadata to an array on the contract. This array is dynamic and can grow (almost) infinitely big. All tokens then have access to this array.\r\n\r\nCollectors of the tokens on this contract can choose to change their token's metadata to any option in the array. This emits a `MetadataUpdate` event that let's marketplaces re-index the metadata and display it.&#x20;\r\n\r\nAs every token has access to the array, this is a new take on an edition that can be used in numerous ways.\r\n\r\n## Source\r\n\r\n[https://github.com/Transient-Labs/tl-creator-contracts/blob/main/src/erc-721/multi-metadata/CollectorsChoice.sol](https://github.com/Transient-Labs/tl-creator-contracts/blob/main/src/erc-721/multi-metadata/CollectorsChoice.sol)\r\n"
        };
    }
}
